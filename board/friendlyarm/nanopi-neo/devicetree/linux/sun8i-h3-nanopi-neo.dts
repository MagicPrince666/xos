/*
 * Copyright (C) 2016 James Pettigrew <james@innovum.com.au>
 *
 * This file is dual-licensed: you can use it either under the terms
 * of the GPL or the X11 license, at your option. Note that this dual
 * licensing only applies to this file, and not this project as a
 * whole.
 *
 *  a) This file is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU General Public License as
 *     published by the Free Software Foundation; either version 2 of the
 *     License, or (at your option) any later version.
 *
 *     This file is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 * Or, alternatively,
 *
 *  b) Permission is hereby granted, free of charge, to any person
 *     obtaining a copy of this software and associated documentation
 *     files (the "Software"), to deal in the Software without
 *     restriction, including without limitation the rights to use,
 *     copy, modify, merge, publish, distribute, sublicense, and/or
 *     sell copies of the Software, and to permit persons to whom the
 *     Software is furnished to do so, subject to the following
 *     conditions:
 *
 *     The above copyright notice and this permission notice shall be
 *     included in all copies or substantial portions of the Software.
 *
 *     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *     NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *     OTHER DEALINGS IN THE SOFTWARE.
 */

#include "sun8i-h3-nanopi.dtsi"
#include <dt-bindings/pwm/pwm.h>
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/input.h>

/ {
	model = "Prince NanoPi NEO";
	compatible = "friendlyarm,nanopi-neo", "allwinner,sun8i-h3";

	aliases {
		serial0 = &uart0;
		serial1 = &uart1;
	};

	chosen {
		stdout-path = "serial1:115200n8";
		/delete-node/ framebuffer@0;
	};

	soc {
		codec: codec@1c22c00 {
			#sound-dai-cells = <0>;
			compatible = "allwinner,sun8i-h3-codec";
			reg = <0x01c22c00 0x400>;
			interrupts = <GIC_SPI 29 IRQ_TYPE_LEVEL_HIGH>;
			clocks = <&ccu CLK_BUS_CODEC>, <&ccu CLK_AC_DIG>;
			clock-names = "apb", "codec";
			resets = <&ccu RST_BUS_CODEC>;
			dmas = <&dma 15>, <&dma 15>;
			dma-names = "rx", "tx";
			allwinner,codec-analog-controls = <&codec_analog>;
			status = "disabled";
		};

		codec_analog: codec-analog@1f015c0 {
			compatible = "allwinner,sun8i-h3-codec-analog";
			reg = <0x01f015c0 0x4>;
		};
	};

	leds {
		compatible = "gpio-leds";

		status {
			label = "nanopi:blue:status";
			gpios = <&pio 0 10 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "heartbeat";
		};

		pwr {
			label = "nanopi:green:pwr";
			gpios = <&r_pio 0 10 GPIO_ACTIVE_HIGH>;
			default-state = "on";
			linux,default-trigger = "timer";
		};
	};

	gpio-keys {
		compatible = "gpio-keys";
		#address-cells = <1>;
		#size-cells = <0>;
		autorepeat;

		switch@0 {
			label = "left";
			linux,code = <103>;
			interrupt-parent = <&pio>;
			interrupts = <0 2 IRQ_TYPE_EDGE_BOTH>; // PA2
		};

		switch@1 {
			label = "mode";
			linux,code = <104>;
			interrupt-parent = <&pio>;
			interrupts = <6 11 IRQ_TYPE_EDGE_BOTH>; // PG11
		};

		switch@2 {
			label = "right";
			linux,code = <105>;
			interrupt-parent = <&pio>;
			interrupts = <0 4 IRQ_TYPE_EDGE_BOTH>;// PA4
		};
	};

	backlight: backlight {
		compatible = "gpio-backlight";
		pinctrl-names = "default";
		pinctrl-0 = <&backlight_pins>;

		gpios = <&pio 0 6 GPIO_ACTIVE_HIGH>; // PA6
		backlight-boot-on;
	};

	pwm-gpio@0 {
		compatible = "pwm-gpio";
		reg = <0>;
		#pwm-cells = <3>;
		pwm-gpio = <&r_pio 0 11 GPIO_ACTIVE_HIGH>; // PL11
	};
};

&uart0 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart0_pa_pins>;
	status = "okay";
};

&uart1 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart1_pins>;
	status = "okay";
};

&ehci0 {
	status = "okay";
};

&spi0 {
	#address-cells = <1>;
	#size-cells = <0>;
    pinctrl-names = "default";
    pinctrl-0 = <&spi0_pins &spi0_pins_cs1>;
	spi-num-chipselects = <2>;
	cs-gpios = <&pio 2 3 GPIO_ACTIVE_HIGH>, <&pio 9 9 GPIO_ACTIVE_HIGH>; // PC3 PG9
    status = "okay";

	ili9341@0 {
		compatible = "ilitek,ili9341";
		reg = <0>;
		status = "okay";
		spi-max-frequency = <50000000>;
		rotate = <270>;
		bgr;
		fps = <30>;
		buswidth = <8>;
		dc-gpios = <&pio 6 8 GPIO_ACTIVE_HIGH>;// PG8
		debug = <0>;
		backlight = <&backlight>;
	};

	tsc2046@1 {
		reg = <1>;	/* CS1 */
		compatible = "ti,tsc2046";
		pinctrl-names = "default";
		pinctrl-0 = <&t_irq>;
		interrupt-parent = <&pio>;
		interrupts = <0 3 IRQ_TYPE_EDGE_FALLING>;	//PA3
		spi-max-frequency = <2000000>;
		pendown-gpio = <&pio 0 3 GPIO_ACTIVE_HIGH>;
		vcc-supply = <&reg_vcc3v3>;

		ti,x-min = /bits/ 16 <0>;
		ti,x-max = /bits/ 16 <320>;
		ti,y-min = /bits/ 16 <0>;
		ti,y-max = /bits/ 16 <240>;
		ti,x-plate-ohms = /bits/ 16 <40>;
		ti,pressure-max = /bits/ 16 <255>;

		wakeup-source;
		status = "okay";
	};
};

&emac {
	phy-handle = <&int_mii_phy>;
	phy-mode = "mii";
	allwinner,leds-active-low;
	local-mac-address = [a4 51 29 00 00 07];
	status = "okay";
};

&ohci0 {
	status = "okay";
};

&usb_otg {
	status = "okay";
	dr_mode = "peripheral";
};

&usbphy {
	usb0_id_det-gpios = <&pio 6 12 GPIO_ACTIVE_HIGH>; /* PG12 */
};

&pwm {
	pinctrl-names = "default";
	pinctrl-0 = <&pwm0_pins>;
	status = "disabled";
};

&pio {
	spi0_pins: spi0-pins {
		pins = "PC0", "PC1", "PC2", "PC3";
		function = "spi0";
   	};

	pwm0_pins: pwm0 {
        pins = "PA5";
        function = "pwm0";
		drive-strength = <30>;
	};

	spi0_pins_cs1: spi0_pins_cs1 {
		pins = "PC3", "PG9";
		function = "gpio_out";
	};

	uart1_pins: uart1-pins {
		pins = "PG6", "PG7";
		function = "uart1";
	};

	backlight_pins: backlight-pins {
		pins = "PA6";
		function = "gpio_out";
		drive-strength = <30>;
	};

	i2c0_pins: i2c0-pins {
		pins = "PA11", "PA12";
		function = "i2c0";
	};

	t_irq: t_irq-pins {
		pins = "PA3";
		function = "gpio_in";
	};
};

&codec {
	allwinner,audio-routing =
		"Line Out", "LINEOUT",
		"MIC1", "Mic",
		"Mic",  "MBIAS";
	status = "okay";
};

&i2c0 {
	status = "okay";
	pinctrl-names = "default";
    pinctrl-0 = <&i2c0_pins>;

	mpu6050@68 {
		compatible = "invensense,mpu6050";
		reg = <0x68>;
		status = "okay";
		interrupt-parent = <&pio>;
		interrupts = <0 17 IRQ_TYPE_EDGE_RISING>; // PA17
		mount-matrix = "-0.984807753012208",  /* x0 */
		               "0",                   /* y0 */
		               "-0.173648177666930",  /* z0 */
		               "0",                   /* x1 */
		               "-1",                  /* y1 */
		               "0",                   /* z1 */
		               "-0.173648177666930",  /* x2 */
		               "0",                   /* y2 */
		               "0.984807753012208";   /* z2 */
	};

	mpu9250: imu@68 {
		compatible = "invensense,mpu9250";
		reg = <0x68>;
		status = "disabled";
		interrupt-parent = <&pio>;
		interrupts = <0 17 IRQ_TYPE_EDGE_RISING>;
		i2c-gate {
			#address-cells = <1>;
			#size-cells = <0>;
			ax8975@c {
				compatible = "ak,ak8975";
				reg = <0x0c>;
			};
		};
		/*invensense,int_config = <0x10>;
		invensense,level_shifter = <0>;
		invensense,orientation = [01 00 00 00 01 00 00 00 01];
		invensense,sec_slave_type = <0>;
		invensense,key = [4e cc 7e eb f6 1e 35 22 00 34 0d 65 32 e9 94 89];*/
	};

	bmp280: pressure@76 {
		compatible = "bosch,bmp280";
		reg = <0x76>;
		status = "disabled";
	};
};
